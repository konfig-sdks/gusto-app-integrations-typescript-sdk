/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeBenefit } from '../models';
// @ts-ignore
import { EmployeeBenefitsCreateBenefitRequest } from '../models';
// @ts-ignore
import { EmployeeBenefitsCreateBenefitRequestContribution } from '../models';
// @ts-ignore
import { EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest } from '../models';
// @ts-ignore
import { EmployeeBenefitsUpdateBenefitRequest } from '../models';
// @ts-ignore
import { EmployeeBenefitsUpdateBenefitRequestContribution } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeBenefitsApi - axios parameter creator
 * @export
 */
export const EmployeeBenefitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
         * @summary Create an employee benefit
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeBenefitsCreateBenefitRequest} [employeeBenefitsCreateBenefitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBenefit: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeeBenefitsCreateBenefitRequest?: EmployeeBenefitsCreateBenefitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createBenefit', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/employee_benefits`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeBenefitsCreateBenefitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/employee_benefits',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeBenefitsCreateBenefitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Year-to-date benefit amounts from a different company represents the amount of money added to an employee\'s plan during a current year, made outside of the current contribution when they were employed at a different company.  This endpoint only supports passing outside contributions for 401(k) benefits.  scope: `employee_benefits:write`
         * @summary Create year-to-date benefit amounts from a different company
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest} [employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createYtdBenefitAmountsFromDifferentCompany: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest?: EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createYtdBenefitAmountsFromDifferentCompany', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/ytd_benefit_amounts_from_different_company`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/ytd_benefit_amounts_from_different_company',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Returns an array of all employee benefits for this employee  Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.  scope: `employee_benefits:read`
         * @summary Get all benefits for an employee
         * @param {string} employeeId The UUID of the employee
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForEmployee: async (employeeId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAllForEmployee', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/employee_benefits`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/employee_benefits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.  scope: `employee_benefits:read`
         * @summary Get an employee benefit
         * @param {string} employeeBenefitId The UUID of the employee benefit.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (employeeBenefitId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeBenefitId' is not null or undefined
            assertParamExists('getById', 'employeeBenefitId', employeeBenefitId)
            const localVarPath = `/v1/employee_benefits/{employee_benefit_id}`
                .replace(`{${"employee_benefit_id"}}`, encodeURIComponent(String(employeeBenefitId !== undefined ? employeeBenefitId : `-employee_benefit_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employee_benefits/{employee_benefit_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
         * @summary Delete an employee benefit
         * @param {string} employeeBenefitId The UUID of the employee benefit.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBenefit: async (employeeBenefitId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeBenefitId' is not null or undefined
            assertParamExists('removeBenefit', 'employeeBenefitId', employeeBenefitId)
            const localVarPath = `/v1/employee_benefits/{employee_benefit_id}`
                .replace(`{${"employee_benefit_id"}}`, encodeURIComponent(String(employeeBenefitId !== undefined ? employeeBenefitId : `-employee_benefit_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employee_benefits/{employee_benefit_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
         * @summary Update an employee benefit
         * @param {string} employeeBenefitId The UUID of the employee benefit.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeBenefitsUpdateBenefitRequest} [employeeBenefitsUpdateBenefitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBenefit: async (employeeBenefitId: string, xGustoApiVersion?: '2024-03-01', employeeBenefitsUpdateBenefitRequest?: EmployeeBenefitsUpdateBenefitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeBenefitId' is not null or undefined
            assertParamExists('updateBenefit', 'employeeBenefitId', employeeBenefitId)
            const localVarPath = `/v1/employee_benefits/{employee_benefit_id}`
                .replace(`{${"employee_benefit_id"}}`, encodeURIComponent(String(employeeBenefitId !== undefined ? employeeBenefitId : `-employee_benefit_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeBenefitsUpdateBenefitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employee_benefits/{employee_benefit_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeBenefitsUpdateBenefitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeBenefitsApi - functional programming interface
 * @export
 */
export const EmployeeBenefitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeBenefitsApiAxiosParamCreator(configuration)
    return {
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
         * @summary Create an employee benefit
         * @param {EmployeeBenefitsApiCreateBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBenefit(requestParameters: EmployeeBenefitsApiCreateBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeBenefit>> {
            const employeeBenefitsCreateBenefitRequest: EmployeeBenefitsCreateBenefitRequest = {
                company_benefit_uuid: requestParameters.company_benefit_uuid,
                active: requestParameters.active,
                employee_deduction: requestParameters.employee_deduction,
                deduct_as_percentage: requestParameters.deduct_as_percentage,
                employee_deduction_annual_maximum: requestParameters.employee_deduction_annual_maximum,
                contribution: requestParameters.contribution,
                elective: requestParameters.elective,
                company_contribution_annual_maximum: requestParameters.company_contribution_annual_maximum,
                limit_option: requestParameters.limit_option,
                catch_up: requestParameters.catch_up,
                coverage_amount: requestParameters.coverage_amount,
                coverage_salary_multiplier: requestParameters.coverage_salary_multiplier,
                deduction_reduces_taxable_income: requestParameters.deduction_reduces_taxable_income,
                company_contribution: requestParameters.company_contribution,
                contribute_as_percentage: requestParameters.contribute_as_percentage
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBenefit(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeeBenefitsCreateBenefitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Year-to-date benefit amounts from a different company represents the amount of money added to an employee\'s plan during a current year, made outside of the current contribution when they were employed at a different company.  This endpoint only supports passing outside contributions for 401(k) benefits.  scope: `employee_benefits:write`
         * @summary Create year-to-date benefit amounts from a different company
         * @param {EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createYtdBenefitAmountsFromDifferentCompany(requestParameters: EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest: EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest = {
                benefit_type: requestParameters.benefit_type,
                tax_year: requestParameters.tax_year,
                ytd_employee_deduction_amount: requestParameters.ytd_employee_deduction_amount,
                ytd_company_contribution_amount: requestParameters.ytd_company_contribution_amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createYtdBenefitAmountsFromDifferentCompany(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Returns an array of all employee benefits for this employee  Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.  scope: `employee_benefits:read`
         * @summary Get all benefits for an employee
         * @param {EmployeeBenefitsApiGetAllForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllForEmployee(requestParameters: EmployeeBenefitsApiGetAllForEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeBenefit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllForEmployee(requestParameters.employeeId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.  scope: `employee_benefits:read`
         * @summary Get an employee benefit
         * @param {EmployeeBenefitsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: EmployeeBenefitsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeBenefit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.employeeBenefitId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
         * @summary Delete an employee benefit
         * @param {EmployeeBenefitsApiRemoveBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBenefit(requestParameters: EmployeeBenefitsApiRemoveBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBenefit(requestParameters.employeeBenefitId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
         * @summary Update an employee benefit
         * @param {EmployeeBenefitsApiUpdateBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBenefit(requestParameters: EmployeeBenefitsApiUpdateBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeBenefit>> {
            const employeeBenefitsUpdateBenefitRequest: EmployeeBenefitsUpdateBenefitRequest = {
                version: requestParameters.version,
                active: requestParameters.active,
                employee_deduction: requestParameters.employee_deduction,
                deduct_as_percentage: requestParameters.deduct_as_percentage,
                employee_deduction_annual_maximum: requestParameters.employee_deduction_annual_maximum,
                contribution: requestParameters.contribution,
                elective: requestParameters.elective,
                company_contribution_annual_maximum: requestParameters.company_contribution_annual_maximum,
                limit_option: requestParameters.limit_option,
                catch_up: requestParameters.catch_up,
                coverage_amount: requestParameters.coverage_amount,
                deduction_reduces_taxable_income: requestParameters.deduction_reduces_taxable_income,
                coverage_salary_multiplier: requestParameters.coverage_salary_multiplier,
                company_contribution: requestParameters.company_contribution,
                contribute_as_percentage: requestParameters.contribute_as_percentage
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBenefit(requestParameters.employeeBenefitId, requestParameters.xGustoApiVersion, employeeBenefitsUpdateBenefitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeBenefitsApi - factory interface
 * @export
 */
export const EmployeeBenefitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeBenefitsApiFp(configuration)
    return {
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
         * @summary Create an employee benefit
         * @param {EmployeeBenefitsApiCreateBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBenefit(requestParameters: EmployeeBenefitsApiCreateBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeBenefit> {
            return localVarFp.createBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Year-to-date benefit amounts from a different company represents the amount of money added to an employee\'s plan during a current year, made outside of the current contribution when they were employed at a different company.  This endpoint only supports passing outside contributions for 401(k) benefits.  scope: `employee_benefits:write`
         * @summary Create year-to-date benefit amounts from a different company
         * @param {EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createYtdBenefitAmountsFromDifferentCompany(requestParameters: EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createYtdBenefitAmountsFromDifferentCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Returns an array of all employee benefits for this employee  Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.  scope: `employee_benefits:read`
         * @summary Get all benefits for an employee
         * @param {EmployeeBenefitsApiGetAllForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForEmployee(requestParameters: EmployeeBenefitsApiGetAllForEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeBenefit>> {
            return localVarFp.getAllForEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.  scope: `employee_benefits:read`
         * @summary Get an employee benefit
         * @param {EmployeeBenefitsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: EmployeeBenefitsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeBenefit> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
         * @summary Delete an employee benefit
         * @param {EmployeeBenefitsApiRemoveBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBenefit(requestParameters: EmployeeBenefitsApiRemoveBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
         * @summary Update an employee benefit
         * @param {EmployeeBenefitsApiUpdateBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBenefit(requestParameters: EmployeeBenefitsApiUpdateBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeBenefit> {
            return localVarFp.updateBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBenefit operation in EmployeeBenefitsApi.
 * @export
 * @interface EmployeeBenefitsApiCreateBenefitRequest
 */
export type EmployeeBenefitsApiCreateBenefitRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeBenefitsApiCreateBenefit
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeBenefitsApiCreateBenefit
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeBenefitsCreateBenefitRequest

/**
 * Request parameters for createYtdBenefitAmountsFromDifferentCompany operation in EmployeeBenefitsApi.
 * @export
 * @interface EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompanyRequest
 */
export type EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompanyRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompany
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompany
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyRequest

/**
 * Request parameters for getAllForEmployee operation in EmployeeBenefitsApi.
 * @export
 * @interface EmployeeBenefitsApiGetAllForEmployeeRequest
 */
export type EmployeeBenefitsApiGetAllForEmployeeRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeBenefitsApiGetAllForEmployee
    */
    readonly employeeId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof EmployeeBenefitsApiGetAllForEmployee
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof EmployeeBenefitsApiGetAllForEmployee
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeBenefitsApiGetAllForEmployee
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getById operation in EmployeeBenefitsApi.
 * @export
 * @interface EmployeeBenefitsApiGetByIdRequest
 */
export type EmployeeBenefitsApiGetByIdRequest = {
    
    /**
    * The UUID of the employee benefit.
    * @type {string}
    * @memberof EmployeeBenefitsApiGetById
    */
    readonly employeeBenefitId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeBenefitsApiGetById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for removeBenefit operation in EmployeeBenefitsApi.
 * @export
 * @interface EmployeeBenefitsApiRemoveBenefitRequest
 */
export type EmployeeBenefitsApiRemoveBenefitRequest = {
    
    /**
    * The UUID of the employee benefit.
    * @type {string}
    * @memberof EmployeeBenefitsApiRemoveBenefit
    */
    readonly employeeBenefitId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeBenefitsApiRemoveBenefit
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateBenefit operation in EmployeeBenefitsApi.
 * @export
 * @interface EmployeeBenefitsApiUpdateBenefitRequest
 */
export type EmployeeBenefitsApiUpdateBenefitRequest = {
    
    /**
    * The UUID of the employee benefit.
    * @type {string}
    * @memberof EmployeeBenefitsApiUpdateBenefit
    */
    readonly employeeBenefitId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeBenefitsApiUpdateBenefit
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeBenefitsUpdateBenefitRequest

/**
 * EmployeeBenefitsApiGenerated - object-oriented interface
 * @export
 * @class EmployeeBenefitsApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeBenefitsApiGenerated extends BaseAPI {
    /**
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
     * @summary Create an employee benefit
     * @param {EmployeeBenefitsApiCreateBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeBenefitsApiGenerated
     */
    public createBenefit(requestParameters: EmployeeBenefitsApiCreateBenefitRequest, options?: AxiosRequestConfig) {
        return EmployeeBenefitsApiFp(this.configuration).createBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Year-to-date benefit amounts from a different company represents the amount of money added to an employee\'s plan during a current year, made outside of the current contribution when they were employed at a different company.  This endpoint only supports passing outside contributions for 401(k) benefits.  scope: `employee_benefits:write`
     * @summary Create year-to-date benefit amounts from a different company
     * @param {EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeBenefitsApiGenerated
     */
    public createYtdBenefitAmountsFromDifferentCompany(requestParameters: EmployeeBenefitsApiCreateYtdBenefitAmountsFromDifferentCompanyRequest, options?: AxiosRequestConfig) {
        return EmployeeBenefitsApiFp(this.configuration).createYtdBenefitAmountsFromDifferentCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Returns an array of all employee benefits for this employee  Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.  scope: `employee_benefits:read`
     * @summary Get all benefits for an employee
     * @param {EmployeeBenefitsApiGetAllForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeBenefitsApiGenerated
     */
    public getAllForEmployee(requestParameters: EmployeeBenefitsApiGetAllForEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeBenefitsApiFp(this.configuration).getAllForEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.  scope: `employee_benefits:read`
     * @summary Get an employee benefit
     * @param {EmployeeBenefitsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeBenefitsApiGenerated
     */
    public getById(requestParameters: EmployeeBenefitsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return EmployeeBenefitsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
     * @summary Delete an employee benefit
     * @param {EmployeeBenefitsApiRemoveBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeBenefitsApiGenerated
     */
    public removeBenefit(requestParameters: EmployeeBenefitsApiRemoveBenefitRequest, options?: AxiosRequestConfig) {
        return EmployeeBenefitsApiFp(this.configuration).removeBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.  scope: `employee_benefits:write`
     * @summary Update an employee benefit
     * @param {EmployeeBenefitsApiUpdateBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeBenefitsApiGenerated
     */
    public updateBenefit(requestParameters: EmployeeBenefitsApiUpdateBenefitRequest, options?: AxiosRequestConfig) {
        return EmployeeBenefitsApiFp(this.configuration).updateBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
