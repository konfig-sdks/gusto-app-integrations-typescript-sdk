/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Compensation } from '../models';
// @ts-ignore
import { FlsaStatusType } from '../models';
// @ts-ignore
import { Job } from '../models';
// @ts-ignore
import { JobsAndCompensationsCreateCompensationRequest } from '../models';
// @ts-ignore
import { JobsAndCompensationsCreateCompensationRequestMinimumWagesInner } from '../models';
// @ts-ignore
import { JobsAndCompensationsCreateJobRequest } from '../models';
// @ts-ignore
import { JobsAndCompensationsUpdateCompensationRequest } from '../models';
// @ts-ignore
import { JobsAndCompensationsUpdateJobRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * JobsAndCompensationsApi - axios parameter creator
 * @export
 */
export const JobsAndCompensationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:write`
         * @summary Create a compensation
         * @param {string} jobId The UUID of the job
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {JobsAndCompensationsCreateCompensationRequest} [jobsAndCompensationsCreateCompensationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompensation: async (jobId: string, xGustoApiVersion?: '2024-03-01', jobsAndCompensationsCreateCompensationRequest?: JobsAndCompensationsCreateCompensationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('createCompensation', 'jobId', jobId)
            const localVarPath = `/v1/jobs/{job_id}/compensations`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-job_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobsAndCompensationsCreateCompensationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/jobs/{job_id}/compensations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobsAndCompensationsCreateCompensationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a job.  scope: `jobs:write`
         * @summary Create a job
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {JobsAndCompensationsCreateJobRequest} [jobsAndCompensationsCreateJobRequest] Create a job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob: async (employeeId: string, xGustoApiVersion?: '2024-03-01', jobsAndCompensationsCreateJobRequest?: JobsAndCompensationsCreateJobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createJob', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/jobs`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobsAndCompensationsCreateJobRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/jobs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobsAndCompensationsCreateJobRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. This endpoint deletes a compensation for a job that hasn\'t been processed on payroll.  scope: `jobs:write` 
         * @summary Delete a compensation
         * @param {string} compensationId The UUID of the compensation
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompensation: async (compensationId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compensationId' is not null or undefined
            assertParamExists('deleteCompensation', 'compensationId', compensationId)
            const localVarPath = `/v1/compensations/{compensation_id}`
                .replace(`{${"compensation_id"}}`, encodeURIComponent(String(compensationId !== undefined ? compensationId : `-compensation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/compensations/{compensation_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific job that an employee holds.  scope: `jobs:write`
         * @summary Delete an individual job
         * @param {string} jobId The UUID of the job
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificJob: async (jobId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('deleteSpecificJob', 'jobId', jobId)
            const localVarPath = `/v1/jobs/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-job_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/jobs/{job_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:read` 
         * @summary Get a compensation
         * @param {string} compensationId The UUID of the compensation
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompensationById: async (compensationId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compensationId' is not null or undefined
            assertParamExists('getCompensationById', 'compensationId', compensationId)
            const localVarPath = `/v1/compensations/{compensation_id}`
                .replace(`{${"compensation_id"}}`, encodeURIComponent(String(compensationId !== undefined ? compensationId : `-compensation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/compensations/{compensation_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. By default the API returns only the current compensation - see the `include` query parameter for retrieving all compensations.  Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same `job_uuid` as another will fail with a relevant error.  Use `flsa_status` to determine if an employee is eligible for overtime.  scope: `jobs:read`
         * @summary Get compensations for a job
         * @param {string} jobId The UUID of the job
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'all_compensations'} [include] Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompensationsByJobId: async (jobId: string, page?: number, per?: number, include?: 'all_compensations', xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getCompensationsByJobId', 'jobId', jobId)
            const localVarPath = `/v1/jobs/{job_id}/compensations`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-job_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/jobs/{job_id}/compensations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a job.  scope: `jobs:read`
         * @summary Get a job
         * @param {string} jobId The UUID of the job
         * @param {'all_compensations'} [include] Available options: - all_compensations: Include all effective dated compensations for the job instead of only the current compensation
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (jobId: string, include?: 'all_compensations', xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getDetails', 'jobId', jobId)
            const localVarPath = `/v1/jobs/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-job_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/jobs/{job_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all of the jobs that an employee holds.  scope: `jobs:read`
         * @summary Get jobs for an employee
         * @param {string} employeeId The UUID of the employee
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'all_compensations'} [include] Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeJobs: async (employeeId: string, page?: number, per?: number, include?: 'all_compensations', xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeJobs', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/jobs`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:write`
         * @summary Update a compensation
         * @param {string} compensationId The UUID of the compensation
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {JobsAndCompensationsUpdateCompensationRequest} [jobsAndCompensationsUpdateCompensationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompensation: async (compensationId: string, xGustoApiVersion?: '2024-03-01', jobsAndCompensationsUpdateCompensationRequest?: JobsAndCompensationsUpdateCompensationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compensationId' is not null or undefined
            assertParamExists('updateCompensation', 'compensationId', compensationId)
            const localVarPath = `/v1/compensations/{compensation_id}`
                .replace(`{${"compensation_id"}}`, encodeURIComponent(String(compensationId !== undefined ? compensationId : `-compensation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobsAndCompensationsUpdateCompensationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/compensations/{compensation_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobsAndCompensationsUpdateCompensationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a job.  scope: `jobs:write`
         * @summary Update a job
         * @param {string} jobId The UUID of the job
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {JobsAndCompensationsUpdateJobRequest} [jobsAndCompensationsUpdateJobRequest] Update a job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJob: async (jobId: string, xGustoApiVersion?: '2024-03-01', jobsAndCompensationsUpdateJobRequest?: JobsAndCompensationsUpdateJobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('updateJob', 'jobId', jobId)
            const localVarPath = `/v1/jobs/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-job_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobsAndCompensationsUpdateJobRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/jobs/{job_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobsAndCompensationsUpdateJobRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsAndCompensationsApi - functional programming interface
 * @export
 */
export const JobsAndCompensationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsAndCompensationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:write`
         * @summary Create a compensation
         * @param {JobsAndCompensationsApiCreateCompensationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompensation(requestParameters: JobsAndCompensationsApiCreateCompensationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Compensation>> {
            const jobsAndCompensationsCreateCompensationRequest: JobsAndCompensationsCreateCompensationRequest = {
                rate: requestParameters.rate,
                payment_unit: requestParameters.payment_unit,
                effective_date: requestParameters.effective_date,
                flsa_status: requestParameters.flsa_status,
                adjust_for_minimum_wage: requestParameters.adjust_for_minimum_wage,
                minimum_wages: requestParameters.minimum_wages
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCompensation(requestParameters.jobId, requestParameters.xGustoApiVersion, jobsAndCompensationsCreateCompensationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a job.  scope: `jobs:write`
         * @summary Create a job
         * @param {JobsAndCompensationsApiCreateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJob(requestParameters: JobsAndCompensationsApiCreateJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const jobsAndCompensationsCreateJobRequest: JobsAndCompensationsCreateJobRequest = {
                title: requestParameters.title,
                hire_date: requestParameters.hire_date,
                two_percent_shareholder: requestParameters.two_percent_shareholder,
                state_wc_covered: requestParameters.state_wc_covered,
                state_wc_class_code: requestParameters.state_wc_class_code
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJob(requestParameters.employeeId, requestParameters.xGustoApiVersion, jobsAndCompensationsCreateJobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. This endpoint deletes a compensation for a job that hasn\'t been processed on payroll.  scope: `jobs:write` 
         * @summary Delete a compensation
         * @param {JobsAndCompensationsApiDeleteCompensationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompensation(requestParameters: JobsAndCompensationsApiDeleteCompensationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompensation(requestParameters.compensationId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a specific job that an employee holds.  scope: `jobs:write`
         * @summary Delete an individual job
         * @param {JobsAndCompensationsApiDeleteSpecificJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecificJob(requestParameters: JobsAndCompensationsApiDeleteSpecificJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecificJob(requestParameters.jobId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:read` 
         * @summary Get a compensation
         * @param {JobsAndCompensationsApiGetCompensationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompensationById(requestParameters: JobsAndCompensationsApiGetCompensationByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Compensation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompensationById(requestParameters.compensationId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. By default the API returns only the current compensation - see the `include` query parameter for retrieving all compensations.  Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same `job_uuid` as another will fail with a relevant error.  Use `flsa_status` to determine if an employee is eligible for overtime.  scope: `jobs:read`
         * @summary Get compensations for a job
         * @param {JobsAndCompensationsApiGetCompensationsByJobIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompensationsByJobId(requestParameters: JobsAndCompensationsApiGetCompensationsByJobIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Compensation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompensationsByJobId(requestParameters.jobId, requestParameters.page, requestParameters.per, requestParameters.include, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a job.  scope: `jobs:read`
         * @summary Get a job
         * @param {JobsAndCompensationsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: JobsAndCompensationsApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.jobId, requestParameters.include, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all of the jobs that an employee holds.  scope: `jobs:read`
         * @summary Get jobs for an employee
         * @param {JobsAndCompensationsApiGetEmployeeJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeJobs(requestParameters: JobsAndCompensationsApiGetEmployeeJobsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Job>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeJobs(requestParameters.employeeId, requestParameters.page, requestParameters.per, requestParameters.include, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:write`
         * @summary Update a compensation
         * @param {JobsAndCompensationsApiUpdateCompensationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompensation(requestParameters: JobsAndCompensationsApiUpdateCompensationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Compensation>> {
            const jobsAndCompensationsUpdateCompensationRequest: JobsAndCompensationsUpdateCompensationRequest = {
                version: requestParameters.version,
                rate: requestParameters.rate,
                payment_unit: requestParameters.payment_unit,
                flsa_status: requestParameters.flsa_status,
                adjust_for_minimum_wage: requestParameters.adjust_for_minimum_wage,
                minimum_wages: requestParameters.minimum_wages
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompensation(requestParameters.compensationId, requestParameters.xGustoApiVersion, jobsAndCompensationsUpdateCompensationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a job.  scope: `jobs:write`
         * @summary Update a job
         * @param {JobsAndCompensationsApiUpdateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateJob(requestParameters: JobsAndCompensationsApiUpdateJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const jobsAndCompensationsUpdateJobRequest: JobsAndCompensationsUpdateJobRequest = {
                title: requestParameters.title,
                version: requestParameters.version,
                hire_date: requestParameters.hire_date,
                two_percent_shareholder: requestParameters.two_percent_shareholder,
                state_wc_covered: requestParameters.state_wc_covered,
                state_wc_class_code: requestParameters.state_wc_class_code
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateJob(requestParameters.jobId, requestParameters.xGustoApiVersion, jobsAndCompensationsUpdateJobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsAndCompensationsApi - factory interface
 * @export
 */
export const JobsAndCompensationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsAndCompensationsApiFp(configuration)
    return {
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:write`
         * @summary Create a compensation
         * @param {JobsAndCompensationsApiCreateCompensationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompensation(requestParameters: JobsAndCompensationsApiCreateCompensationRequest, options?: AxiosRequestConfig): AxiosPromise<Compensation> {
            return localVarFp.createCompensation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a job.  scope: `jobs:write`
         * @summary Create a job
         * @param {JobsAndCompensationsApiCreateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob(requestParameters: JobsAndCompensationsApiCreateJobRequest, options?: AxiosRequestConfig): AxiosPromise<Job> {
            return localVarFp.createJob(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. This endpoint deletes a compensation for a job that hasn\'t been processed on payroll.  scope: `jobs:write` 
         * @summary Delete a compensation
         * @param {JobsAndCompensationsApiDeleteCompensationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompensation(requestParameters: JobsAndCompensationsApiDeleteCompensationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCompensation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific job that an employee holds.  scope: `jobs:write`
         * @summary Delete an individual job
         * @param {JobsAndCompensationsApiDeleteSpecificJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificJob(requestParameters: JobsAndCompensationsApiDeleteSpecificJobRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSpecificJob(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:read` 
         * @summary Get a compensation
         * @param {JobsAndCompensationsApiGetCompensationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompensationById(requestParameters: JobsAndCompensationsApiGetCompensationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Compensation> {
            return localVarFp.getCompensationById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. By default the API returns only the current compensation - see the `include` query parameter for retrieving all compensations.  Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same `job_uuid` as another will fail with a relevant error.  Use `flsa_status` to determine if an employee is eligible for overtime.  scope: `jobs:read`
         * @summary Get compensations for a job
         * @param {JobsAndCompensationsApiGetCompensationsByJobIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompensationsByJobId(requestParameters: JobsAndCompensationsApiGetCompensationsByJobIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Compensation>> {
            return localVarFp.getCompensationsByJobId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a job.  scope: `jobs:read`
         * @summary Get a job
         * @param {JobsAndCompensationsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: JobsAndCompensationsApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Job> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all of the jobs that an employee holds.  scope: `jobs:read`
         * @summary Get jobs for an employee
         * @param {JobsAndCompensationsApiGetEmployeeJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeJobs(requestParameters: JobsAndCompensationsApiGetEmployeeJobsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Job>> {
            return localVarFp.getEmployeeJobs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:write`
         * @summary Update a compensation
         * @param {JobsAndCompensationsApiUpdateCompensationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompensation(requestParameters: JobsAndCompensationsApiUpdateCompensationRequest, options?: AxiosRequestConfig): AxiosPromise<Compensation> {
            return localVarFp.updateCompensation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a job.  scope: `jobs:write`
         * @summary Update a job
         * @param {JobsAndCompensationsApiUpdateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJob(requestParameters: JobsAndCompensationsApiUpdateJobRequest, options?: AxiosRequestConfig): AxiosPromise<Job> {
            return localVarFp.updateJob(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCompensation operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiCreateCompensationRequest
 */
export type JobsAndCompensationsApiCreateCompensationRequest = {
    
    /**
    * The UUID of the job
    * @type {string}
    * @memberof JobsAndCompensationsApiCreateCompensation
    */
    readonly jobId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiCreateCompensation
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & JobsAndCompensationsCreateCompensationRequest

/**
 * Request parameters for createJob operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiCreateJobRequest
 */
export type JobsAndCompensationsApiCreateJobRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof JobsAndCompensationsApiCreateJob
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiCreateJob
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & JobsAndCompensationsCreateJobRequest

/**
 * Request parameters for deleteCompensation operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiDeleteCompensationRequest
 */
export type JobsAndCompensationsApiDeleteCompensationRequest = {
    
    /**
    * The UUID of the compensation
    * @type {string}
    * @memberof JobsAndCompensationsApiDeleteCompensation
    */
    readonly compensationId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiDeleteCompensation
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for deleteSpecificJob operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiDeleteSpecificJobRequest
 */
export type JobsAndCompensationsApiDeleteSpecificJobRequest = {
    
    /**
    * The UUID of the job
    * @type {string}
    * @memberof JobsAndCompensationsApiDeleteSpecificJob
    */
    readonly jobId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiDeleteSpecificJob
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCompensationById operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiGetCompensationByIdRequest
 */
export type JobsAndCompensationsApiGetCompensationByIdRequest = {
    
    /**
    * The UUID of the compensation
    * @type {string}
    * @memberof JobsAndCompensationsApiGetCompensationById
    */
    readonly compensationId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiGetCompensationById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCompensationsByJobId operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiGetCompensationsByJobIdRequest
 */
export type JobsAndCompensationsApiGetCompensationsByJobIdRequest = {
    
    /**
    * The UUID of the job
    * @type {string}
    * @memberof JobsAndCompensationsApiGetCompensationsByJobId
    */
    readonly jobId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof JobsAndCompensationsApiGetCompensationsByJobId
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof JobsAndCompensationsApiGetCompensationsByJobId
    */
    readonly per?: number
    
    /**
    * Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
    * @type {'all_compensations'}
    * @memberof JobsAndCompensationsApiGetCompensationsByJobId
    */
    readonly include?: 'all_compensations'
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiGetCompensationsByJobId
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getDetails operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiGetDetailsRequest
 */
export type JobsAndCompensationsApiGetDetailsRequest = {
    
    /**
    * The UUID of the job
    * @type {string}
    * @memberof JobsAndCompensationsApiGetDetails
    */
    readonly jobId: string
    
    /**
    * Available options: - all_compensations: Include all effective dated compensations for the job instead of only the current compensation
    * @type {'all_compensations'}
    * @memberof JobsAndCompensationsApiGetDetails
    */
    readonly include?: 'all_compensations'
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiGetDetails
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getEmployeeJobs operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiGetEmployeeJobsRequest
 */
export type JobsAndCompensationsApiGetEmployeeJobsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof JobsAndCompensationsApiGetEmployeeJobs
    */
    readonly employeeId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof JobsAndCompensationsApiGetEmployeeJobs
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof JobsAndCompensationsApiGetEmployeeJobs
    */
    readonly per?: number
    
    /**
    * Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
    * @type {'all_compensations'}
    * @memberof JobsAndCompensationsApiGetEmployeeJobs
    */
    readonly include?: 'all_compensations'
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiGetEmployeeJobs
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateCompensation operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiUpdateCompensationRequest
 */
export type JobsAndCompensationsApiUpdateCompensationRequest = {
    
    /**
    * The UUID of the compensation
    * @type {string}
    * @memberof JobsAndCompensationsApiUpdateCompensation
    */
    readonly compensationId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiUpdateCompensation
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & JobsAndCompensationsUpdateCompensationRequest

/**
 * Request parameters for updateJob operation in JobsAndCompensationsApi.
 * @export
 * @interface JobsAndCompensationsApiUpdateJobRequest
 */
export type JobsAndCompensationsApiUpdateJobRequest = {
    
    /**
    * The UUID of the job
    * @type {string}
    * @memberof JobsAndCompensationsApiUpdateJob
    */
    readonly jobId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof JobsAndCompensationsApiUpdateJob
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & JobsAndCompensationsUpdateJobRequest

/**
 * JobsAndCompensationsApiGenerated - object-oriented interface
 * @export
 * @class JobsAndCompensationsApiGenerated
 * @extends {BaseAPI}
 */
export class JobsAndCompensationsApiGenerated extends BaseAPI {
    /**
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:write`
     * @summary Create a compensation
     * @param {JobsAndCompensationsApiCreateCompensationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public createCompensation(requestParameters: JobsAndCompensationsApiCreateCompensationRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).createCompensation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a job.  scope: `jobs:write`
     * @summary Create a job
     * @param {JobsAndCompensationsApiCreateJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public createJob(requestParameters: JobsAndCompensationsApiCreateJobRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).createJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. This endpoint deletes a compensation for a job that hasn\'t been processed on payroll.  scope: `jobs:write` 
     * @summary Delete a compensation
     * @param {JobsAndCompensationsApiDeleteCompensationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public deleteCompensation(requestParameters: JobsAndCompensationsApiDeleteCompensationRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).deleteCompensation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specific job that an employee holds.  scope: `jobs:write`
     * @summary Delete an individual job
     * @param {JobsAndCompensationsApiDeleteSpecificJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public deleteSpecificJob(requestParameters: JobsAndCompensationsApiDeleteSpecificJobRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).deleteSpecificJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:read` 
     * @summary Get a compensation
     * @param {JobsAndCompensationsApiGetCompensationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public getCompensationById(requestParameters: JobsAndCompensationsApiGetCompensationByIdRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).getCompensationById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. By default the API returns only the current compensation - see the `include` query parameter for retrieving all compensations.  Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same `job_uuid` as another will fail with a relevant error.  Use `flsa_status` to determine if an employee is eligible for overtime.  scope: `jobs:read`
     * @summary Get compensations for a job
     * @param {JobsAndCompensationsApiGetCompensationsByJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public getCompensationsByJobId(requestParameters: JobsAndCompensationsApiGetCompensationsByJobIdRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).getCompensationsByJobId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a job.  scope: `jobs:read`
     * @summary Get a job
     * @param {JobsAndCompensationsApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public getDetails(requestParameters: JobsAndCompensationsApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all of the jobs that an employee holds.  scope: `jobs:read`
     * @summary Get jobs for an employee
     * @param {JobsAndCompensationsApiGetEmployeeJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public getEmployeeJobs(requestParameters: JobsAndCompensationsApiGetEmployeeJobsRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).getEmployeeJobs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.  scope: `jobs:write`
     * @summary Update a compensation
     * @param {JobsAndCompensationsApiUpdateCompensationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public updateCompensation(requestParameters: JobsAndCompensationsApiUpdateCompensationRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).updateCompensation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a job.  scope: `jobs:write`
     * @summary Update a job
     * @param {JobsAndCompensationsApiUpdateJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsAndCompensationsApiGenerated
     */
    public updateJob(requestParameters: JobsAndCompensationsApiUpdateJobRequest, options?: AxiosRequestConfig) {
        return JobsAndCompensationsApiFp(this.configuration).updateJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
