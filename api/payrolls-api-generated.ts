/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Payroll } from '../models';
// @ts-ignore
import { PayrollMinimal } from '../models';
// @ts-ignore
import { PayrollPrepared } from '../models';
// @ts-ignore
import { PayrollsUpdateByIdRequest } from '../models';
// @ts-ignore
import { PayrollsUpdateByIdRequestEmployeeCompensationsInner } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayrollsApi - axios parameter creator
 * @export
 */
export const PayrollsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can\'t be more than 1 year apart.  scope: `payrolls:read`
         * @summary Get all payrolls for a company
         * @param {string} companyId The UUID of the company
         * @param {'unprocessed' | 'processed'} [processingStatuses] Whether to include processed and/or unprocessed payrolls in the response, defaults to processed, for multiple attributes comma separate the values, i.e. &#x60;?processing_statuses&#x3D;processed,unprocessed&#x60;
         * @param {'regular' | 'off_cycle' | 'external'} [payrollTypes] Whether to include regular and/or off_cycle payrolls in the response, defaults to regular, for multiple attributes comma separate the values, i.e. &#x60;?payroll_types&#x3D;regular,off_cycle&#x60;
         * @param {'totals' | 'payroll_status_meta'} [include] Include the requested attribute in the response. In v2023-04-01 totals are no longer included by default. For multiple attributes comma separate the values, i.e. &#x60;?include&#x3D;totals,payroll_status_meta&#x60;
         * @param {string} [startDate] Return payrolls whose pay period is after the start date
         * @param {string} [endDate] Return payrolls whose pay period is before the end date
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForCompany: async (companyId: string, processingStatuses?: 'unprocessed' | 'processed', payrollTypes?: 'regular' | 'off_cycle' | 'external', include?: 'totals' | 'payroll_status_meta', startDate?: string, endDate?: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAllForCompany', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/payrolls`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (processingStatuses !== undefined) {
                localVarQueryParameter['processing_statuses'] = processingStatuses;
            }

            if (payrollTypes !== undefined) {
                localVarQueryParameter['payroll_types'] = payrollTypes;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope  scope: `payrolls:read`
         * @summary Get a single payroll
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {'benefits' | 'deductions' | 'taxes' | 'payroll_status_meta'} [include] Include the requested attribute in the response, for multiple attributes comma separate the values, i.e. &#x60;?include&#x3D;benefits,deductions,taxes&#x60;
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePayroll: async (companyId: string, payrollId: string, include?: 'benefits' | 'deductions' | 'taxes' | 'payroll_status_meta', xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSinglePayroll', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('getSinglePayroll', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.  Notes:  * Will null out calculated_at & totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: `payrolls:write`
         * @summary Prepare a payroll for update
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareForUpdate: async (companyId: string, payrollId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('prepareForUpdate', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('prepareForUpdate', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}/prepare`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}/prepare',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: `payrolls:write`
         * @summary Update a payroll by ID
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PayrollsUpdateByIdRequest} [payrollsUpdateByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (companyId: string, payrollId: string, xGustoApiVersion?: '2024-03-01', payrollsUpdateByIdRequest?: PayrollsUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateById', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('updateById', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payrollsUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payrollsUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayrollsApi - functional programming interface
 * @export
 */
export const PayrollsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayrollsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can\'t be more than 1 year apart.  scope: `payrolls:read`
         * @summary Get all payrolls for a company
         * @param {PayrollsApiGetAllForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllForCompany(requestParameters: PayrollsApiGetAllForCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayrollMinimal>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllForCompany(requestParameters.companyId, requestParameters.processingStatuses, requestParameters.payrollTypes, requestParameters.include, requestParameters.startDate, requestParameters.endDate, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope  scope: `payrolls:read`
         * @summary Get a single payroll
         * @param {PayrollsApiGetSinglePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSinglePayroll(requestParameters: PayrollsApiGetSinglePayrollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSinglePayroll(requestParameters.companyId, requestParameters.payrollId, requestParameters.include, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.  Notes:  * Will null out calculated_at & totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: `payrolls:write`
         * @summary Prepare a payroll for update
         * @param {PayrollsApiPrepareForUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prepareForUpdate(requestParameters: PayrollsApiPrepareForUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollPrepared>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prepareForUpdate(requestParameters.companyId, requestParameters.payrollId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: `payrolls:write`
         * @summary Update a payroll by ID
         * @param {PayrollsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: PayrollsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollPrepared>> {
            const payrollsUpdateByIdRequest: PayrollsUpdateByIdRequest = {
                employee_compensations: requestParameters.employee_compensations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.companyId, requestParameters.payrollId, requestParameters.xGustoApiVersion, payrollsUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayrollsApi - factory interface
 * @export
 */
export const PayrollsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayrollsApiFp(configuration)
    return {
        /**
         * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can\'t be more than 1 year apart.  scope: `payrolls:read`
         * @summary Get all payrolls for a company
         * @param {PayrollsApiGetAllForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForCompany(requestParameters: PayrollsApiGetAllForCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PayrollMinimal>> {
            return localVarFp.getAllForCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope  scope: `payrolls:read`
         * @summary Get a single payroll
         * @param {PayrollsApiGetSinglePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePayroll(requestParameters: PayrollsApiGetSinglePayrollRequest, options?: AxiosRequestConfig): AxiosPromise<Payroll> {
            return localVarFp.getSinglePayroll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.  Notes:  * Will null out calculated_at & totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: `payrolls:write`
         * @summary Prepare a payroll for update
         * @param {PayrollsApiPrepareForUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareForUpdate(requestParameters: PayrollsApiPrepareForUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollPrepared> {
            return localVarFp.prepareForUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: `payrolls:write`
         * @summary Update a payroll by ID
         * @param {PayrollsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: PayrollsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollPrepared> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllForCompany operation in PayrollsApi.
 * @export
 * @interface PayrollsApiGetAllForCompanyRequest
 */
export type PayrollsApiGetAllForCompanyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiGetAllForCompany
    */
    readonly companyId: string
    
    /**
    * Whether to include processed and/or unprocessed payrolls in the response, defaults to processed, for multiple attributes comma separate the values, i.e. `?processing_statuses=processed,unprocessed`
    * @type {'unprocessed' | 'processed'}
    * @memberof PayrollsApiGetAllForCompany
    */
    readonly processingStatuses?: 'unprocessed' | 'processed'
    
    /**
    * Whether to include regular and/or off_cycle payrolls in the response, defaults to regular, for multiple attributes comma separate the values, i.e. `?payroll_types=regular,off_cycle`
    * @type {'regular' | 'off_cycle' | 'external'}
    * @memberof PayrollsApiGetAllForCompany
    */
    readonly payrollTypes?: 'regular' | 'off_cycle' | 'external'
    
    /**
    * Include the requested attribute in the response. In v2023-04-01 totals are no longer included by default. For multiple attributes comma separate the values, i.e. `?include=totals,payroll_status_meta`
    * @type {'totals' | 'payroll_status_meta'}
    * @memberof PayrollsApiGetAllForCompany
    */
    readonly include?: 'totals' | 'payroll_status_meta'
    
    /**
    * Return payrolls whose pay period is after the start date
    * @type {string}
    * @memberof PayrollsApiGetAllForCompany
    */
    readonly startDate?: string
    
    /**
    * Return payrolls whose pay period is before the end date
    * @type {string}
    * @memberof PayrollsApiGetAllForCompany
    */
    readonly endDate?: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiGetAllForCompany
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getSinglePayroll operation in PayrollsApi.
 * @export
 * @interface PayrollsApiGetSinglePayrollRequest
 */
export type PayrollsApiGetSinglePayrollRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiGetSinglePayroll
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiGetSinglePayroll
    */
    readonly payrollId: string
    
    /**
    * Include the requested attribute in the response, for multiple attributes comma separate the values, i.e. `?include=benefits,deductions,taxes`
    * @type {'benefits' | 'deductions' | 'taxes' | 'payroll_status_meta'}
    * @memberof PayrollsApiGetSinglePayroll
    */
    readonly include?: 'benefits' | 'deductions' | 'taxes' | 'payroll_status_meta'
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiGetSinglePayroll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for prepareForUpdate operation in PayrollsApi.
 * @export
 * @interface PayrollsApiPrepareForUpdateRequest
 */
export type PayrollsApiPrepareForUpdateRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiPrepareForUpdate
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiPrepareForUpdate
    */
    readonly payrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiPrepareForUpdate
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateById operation in PayrollsApi.
 * @export
 * @interface PayrollsApiUpdateByIdRequest
 */
export type PayrollsApiUpdateByIdRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiUpdateById
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiUpdateById
    */
    readonly payrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiUpdateById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PayrollsUpdateByIdRequest

/**
 * PayrollsApiGenerated - object-oriented interface
 * @export
 * @class PayrollsApiGenerated
 * @extends {BaseAPI}
 */
export class PayrollsApiGenerated extends BaseAPI {
    /**
     * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can\'t be more than 1 year apart.  scope: `payrolls:read`
     * @summary Get all payrolls for a company
     * @param {PayrollsApiGetAllForCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public getAllForCompany(requestParameters: PayrollsApiGetAllForCompanyRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).getAllForCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope  scope: `payrolls:read`
     * @summary Get a single payroll
     * @param {PayrollsApiGetSinglePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public getSinglePayroll(requestParameters: PayrollsApiGetSinglePayrollRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).getSinglePayroll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.  Notes:  * Will null out calculated_at & totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: `payrolls:write`
     * @summary Prepare a payroll for update
     * @param {PayrollsApiPrepareForUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public prepareForUpdate(requestParameters: PayrollsApiPrepareForUpdateRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).prepareForUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: `payrolls:write`
     * @summary Update a payroll by ID
     * @param {PayrollsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public updateById(requestParameters: PayrollsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
