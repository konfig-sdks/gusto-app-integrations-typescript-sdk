/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayPeriod } from '../models';
// @ts-ignore
import { PaySchedule } from '../models';
// @ts-ignore
import { PayScheduleAssignment } from '../models';
// @ts-ignore
import { UnprocessedTerminationPayPeriod } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaySchedulesApi - axios parameter creator
 * @export
 */
export const PaySchedulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: `pay_schedules:read`
         * @summary Get pay schedule assignments for a company
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignments: async (companyId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAssignments', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules/assignments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules/assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get a pay schedule
         * @param {string} companyId The UUID of the company
         * @param {string} payScheduleId The UUID of the pay schedule
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (companyId: string, payScheduleId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getDetails', 'companyId', companyId)
            // verify required parameter 'payScheduleId' is not null or undefined
            assertParamExists('getDetails', 'payScheduleId', payScheduleId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules/{pay_schedule_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"pay_schedule_id"}}`, encodeURIComponent(String(payScheduleId !== undefined ? payScheduleId : `-pay_schedule_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules/{pay_schedule_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get the pay schedules for a company
         * @param {string} companyId The UUID of the company
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a payroll admin terminates an employee and selects \"Dismissal Payroll\" as the employee\'s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: `payrolls:read`
         * @summary Get termination pay periods for a company
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnprocessedTerminationPayPeriods: async (companyId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listUnprocessedTerminationPayPeriods', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_periods/unprocessed_termination_pay_periods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_periods/unprocessed_termination_pay_periods',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the `start_date` and `end_date` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version \'2023-04-01\', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: `payrolls:read`
         * @summary Get pay periods for a company
         * @param {string} companyId The UUID of the company
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [payrollTypes] regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list_1: async (companyId: string, startDate?: string, endDate?: string, payrollTypes?: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list_1', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_periods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (payrollTypes !== undefined) {
                localVarQueryParameter['payroll_types'] = payrollTypes;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_periods',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaySchedulesApi - functional programming interface
 * @export
 */
export const PaySchedulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaySchedulesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: `pay_schedules:read`
         * @summary Get pay schedule assignments for a company
         * @param {PaySchedulesApiGetAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignments(requestParameters: PaySchedulesApiGetAssignmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayScheduleAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignments(requestParameters.companyId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get a pay schedule
         * @param {PaySchedulesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: PaySchedulesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaySchedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.companyId, requestParameters.payScheduleId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get the pay schedules for a company
         * @param {PaySchedulesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: PaySchedulesApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaySchedule>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a payroll admin terminates an employee and selects \"Dismissal Payroll\" as the employee\'s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: `payrolls:read`
         * @summary Get termination pay periods for a company
         * @param {PaySchedulesApiListUnprocessedTerminationPayPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUnprocessedTerminationPayPeriods(requestParameters: PaySchedulesApiListUnprocessedTerminationPayPeriodsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnprocessedTerminationPayPeriod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUnprocessedTerminationPayPeriods(requestParameters.companyId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the `start_date` and `end_date` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version \'2023-04-01\', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: `payrolls:read`
         * @summary Get pay periods for a company
         * @param {PaySchedulesApiList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list_1(requestParameters: PaySchedulesApiList0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayPeriod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list_1(requestParameters.companyId, requestParameters.startDate, requestParameters.endDate, requestParameters.payrollTypes, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaySchedulesApi - factory interface
 * @export
 */
export const PaySchedulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaySchedulesApiFp(configuration)
    return {
        /**
         * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: `pay_schedules:read`
         * @summary Get pay schedule assignments for a company
         * @param {PaySchedulesApiGetAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignments(requestParameters: PaySchedulesApiGetAssignmentsRequest, options?: AxiosRequestConfig): AxiosPromise<PayScheduleAssignment> {
            return localVarFp.getAssignments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get a pay schedule
         * @param {PaySchedulesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: PaySchedulesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<PaySchedule> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get the pay schedules for a company
         * @param {PaySchedulesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: PaySchedulesApiListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PaySchedule>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * When a payroll admin terminates an employee and selects \"Dismissal Payroll\" as the employee\'s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: `payrolls:read`
         * @summary Get termination pay periods for a company
         * @param {PaySchedulesApiListUnprocessedTerminationPayPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnprocessedTerminationPayPeriods(requestParameters: PaySchedulesApiListUnprocessedTerminationPayPeriodsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UnprocessedTerminationPayPeriod>> {
            return localVarFp.listUnprocessedTerminationPayPeriods(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the `start_date` and `end_date` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version \'2023-04-01\', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: `payrolls:read`
         * @summary Get pay periods for a company
         * @param {PaySchedulesApiList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list_1(requestParameters: PaySchedulesApiList0Request, options?: AxiosRequestConfig): AxiosPromise<Array<PayPeriod>> {
            return localVarFp.list_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAssignments operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiGetAssignmentsRequest
 */
export type PaySchedulesApiGetAssignmentsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiGetAssignments
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiGetAssignments
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getDetails operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiGetDetailsRequest
 */
export type PaySchedulesApiGetDetailsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiGetDetails
    */
    readonly companyId: string
    
    /**
    * The UUID of the pay schedule
    * @type {string}
    * @memberof PaySchedulesApiGetDetails
    */
    readonly payScheduleId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiGetDetails
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for list operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiListRequest
 */
export type PaySchedulesApiListRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiList
    */
    readonly companyId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof PaySchedulesApiList
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof PaySchedulesApiList
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiList
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listUnprocessedTerminationPayPeriods operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiListUnprocessedTerminationPayPeriodsRequest
 */
export type PaySchedulesApiListUnprocessedTerminationPayPeriodsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiListUnprocessedTerminationPayPeriods
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiListUnprocessedTerminationPayPeriods
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for list_1 operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiList0Request
 */
export type PaySchedulesApiList0Request = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiList0
    */
    readonly companyId: string
    
    /**
    * 
    * @type {string}
    * @memberof PaySchedulesApiList0
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof PaySchedulesApiList0
    */
    readonly endDate?: string
    
    /**
    * regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
    * @type {string}
    * @memberof PaySchedulesApiList0
    */
    readonly payrollTypes?: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiList0
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * PaySchedulesApiGenerated - object-oriented interface
 * @export
 * @class PaySchedulesApiGenerated
 * @extends {BaseAPI}
 */
export class PaySchedulesApiGenerated extends BaseAPI {
    /**
     * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: `pay_schedules:read`
     * @summary Get pay schedule assignments for a company
     * @param {PaySchedulesApiGetAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public getAssignments(requestParameters: PaySchedulesApiGetAssignmentsRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).getAssignments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
     * @summary Get a pay schedule
     * @param {PaySchedulesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public getDetails(requestParameters: PaySchedulesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
     * @summary Get the pay schedules for a company
     * @param {PaySchedulesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public list(requestParameters: PaySchedulesApiListRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a payroll admin terminates an employee and selects \"Dismissal Payroll\" as the employee\'s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: `payrolls:read`
     * @summary Get termination pay periods for a company
     * @param {PaySchedulesApiListUnprocessedTerminationPayPeriodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public listUnprocessedTerminationPayPeriods(requestParameters: PaySchedulesApiListUnprocessedTerminationPayPeriodsRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).listUnprocessedTerminationPayPeriods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the `start_date` and `end_date` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version \'2023-04-01\', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: `payrolls:read`
     * @summary Get pay periods for a company
     * @param {PaySchedulesApiList0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public list_1(requestParameters: PaySchedulesApiList0Request, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).list_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
