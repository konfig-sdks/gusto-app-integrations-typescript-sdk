/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccruingTimeOffHour } from '../models';
// @ts-ignore
import { TimeOffPoliciesCalculateAccruingTimeOffHoursRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeOffPoliciesApi - axios parameter creator
 * @export
 */
export const TimeOffPoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: `payrolls:read`
         * @summary Calculate accruing time off hours
         * @param {string} payrollId The UUID of the payroll
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {TimeOffPoliciesCalculateAccruingTimeOffHoursRequest} [timeOffPoliciesCalculateAccruingTimeOffHoursRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateAccruingTimeOffHours: async (payrollId: string, employeeId: string, xGustoApiVersion?: '2024-03-01', timeOffPoliciesCalculateAccruingTimeOffHoursRequest?: TimeOffPoliciesCalculateAccruingTimeOffHoursRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('calculateAccruingTimeOffHours', 'payrollId', payrollId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('calculateAccruingTimeOffHours', 'employeeId', employeeId)
            const localVarPath = `/v1/payrolls/{payroll_id}/employees/{employee_id}/calculate_accruing_time_off_hours`
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffPoliciesCalculateAccruingTimeOffHoursRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/payrolls/{payroll_id}/employees/{employee_id}/calculate_accruing_time_off_hours',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffPoliciesCalculateAccruingTimeOffHoursRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeOffPoliciesApi - functional programming interface
 * @export
 */
export const TimeOffPoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeOffPoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: `payrolls:read`
         * @summary Calculate accruing time off hours
         * @param {TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateAccruingTimeOffHours(requestParameters: TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccruingTimeOffHour>>> {
            const timeOffPoliciesCalculateAccruingTimeOffHoursRequest: TimeOffPoliciesCalculateAccruingTimeOffHoursRequest = {
                regular_hours_worked: requestParameters.regular_hours_worked,
                overtime_hours_worked: requestParameters.overtime_hours_worked,
                double_overtime_hours_worked: requestParameters.double_overtime_hours_worked,
                pto_hours_used: requestParameters.pto_hours_used,
                sick_hours_used: requestParameters.sick_hours_used
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateAccruingTimeOffHours(requestParameters.payrollId, requestParameters.employeeId, requestParameters.xGustoApiVersion, timeOffPoliciesCalculateAccruingTimeOffHoursRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeOffPoliciesApi - factory interface
 * @export
 */
export const TimeOffPoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeOffPoliciesApiFp(configuration)
    return {
        /**
         * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: `payrolls:read`
         * @summary Calculate accruing time off hours
         * @param {TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateAccruingTimeOffHours(requestParameters: TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AccruingTimeOffHour>> {
            return localVarFp.calculateAccruingTimeOffHours(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for calculateAccruingTimeOffHours operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest
 */
export type TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest = {
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof TimeOffPoliciesApiCalculateAccruingTimeOffHours
    */
    readonly payrollId: string
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof TimeOffPoliciesApiCalculateAccruingTimeOffHours
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiCalculateAccruingTimeOffHours
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & TimeOffPoliciesCalculateAccruingTimeOffHoursRequest

/**
 * TimeOffPoliciesApiGenerated - object-oriented interface
 * @export
 * @class TimeOffPoliciesApiGenerated
 * @extends {BaseAPI}
 */
export class TimeOffPoliciesApiGenerated extends BaseAPI {
    /**
     * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: `payrolls:read`
     * @summary Calculate accruing time off hours
     * @param {TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public calculateAccruingTimeOffHours(requestParameters: TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).calculateAccruingTimeOffHours(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
