/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContractorPayment } from '../models';
// @ts-ignore
import { ContractorPaymentsListForCompanyResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContractorPaymentsApi - axios parameter creator
 * @export
 */
export const ContractorPaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single contractor payments  scope: `payrolls:read`
         * @summary Get a single contractor payment
         * @param {string} companyId The UUID of the company
         * @param {string} contractorPaymentId The UUID of the contractor payment
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle: async (companyId: string, contractorPaymentId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSingle', 'companyId', companyId)
            // verify required parameter 'contractorPaymentId' is not null or undefined
            assertParamExists('getSingle', 'contractorPaymentId', contractorPaymentId)
            const localVarPath = `/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"contractor_payment_id"}}`, encodeURIComponent(String(contractorPaymentId !== undefined ? contractorPaymentId : `-contractor_payment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing individual contractor payments, within a given time period, including totals.  scope: `payrolls:read`
         * @summary Get contractor payments for a company
         * @param {string} companyId The UUID of the company
         * @param {string} startDate The time period for which to retrieve contractor payments
         * @param {string} endDate The time period for which to retrieve contractor payments
         * @param {string} [contractorUuid] The UUID of the contractor. When specified, will load all payments for that contractor.
         * @param {boolean} [groupByDate] Display contractor payments results group by check date if set to true.
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForCompany: async (companyId: string, startDate: string, endDate: string, contractorUuid?: string, groupByDate?: boolean, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listForCompany', 'companyId', companyId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('listForCompany', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('listForCompany', 'endDate', endDate)
            const localVarPath = `/v1/companies/{company_id}/contractor_payments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (contractorUuid !== undefined) {
                localVarQueryParameter['contractor_uuid'] = contractorUuid;
            }

            if (groupByDate !== undefined) {
                localVarQueryParameter['group_by_date'] = groupByDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/contractor_payments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractorPaymentsApi - functional programming interface
 * @export
 */
export const ContractorPaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractorPaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single contractor payments  scope: `payrolls:read`
         * @summary Get a single contractor payment
         * @param {ContractorPaymentsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingle(requestParameters: ContractorPaymentsApiGetSingleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingle(requestParameters.companyId, requestParameters.contractorPaymentId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an object containing individual contractor payments, within a given time period, including totals.  scope: `payrolls:read`
         * @summary Get contractor payments for a company
         * @param {ContractorPaymentsApiListForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listForCompany(requestParameters: ContractorPaymentsApiListForCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPaymentsListForCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listForCompany(requestParameters.companyId, requestParameters.startDate, requestParameters.endDate, requestParameters.contractorUuid, requestParameters.groupByDate, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractorPaymentsApi - factory interface
 * @export
 */
export const ContractorPaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractorPaymentsApiFp(configuration)
    return {
        /**
         * Returns a single contractor payments  scope: `payrolls:read`
         * @summary Get a single contractor payment
         * @param {ContractorPaymentsApiGetSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingle(requestParameters: ContractorPaymentsApiGetSingleRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPayment> {
            return localVarFp.getSingle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an object containing individual contractor payments, within a given time period, including totals.  scope: `payrolls:read`
         * @summary Get contractor payments for a company
         * @param {ContractorPaymentsApiListForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForCompany(requestParameters: ContractorPaymentsApiListForCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPaymentsListForCompanyResponse> {
            return localVarFp.listForCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSingle operation in ContractorPaymentsApi.
 * @export
 * @interface ContractorPaymentsApiGetSingleRequest
 */
export type ContractorPaymentsApiGetSingleRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ContractorPaymentsApiGetSingle
    */
    readonly companyId: string
    
    /**
    * The UUID of the contractor payment
    * @type {string}
    * @memberof ContractorPaymentsApiGetSingle
    */
    readonly contractorPaymentId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentsApiGetSingle
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listForCompany operation in ContractorPaymentsApi.
 * @export
 * @interface ContractorPaymentsApiListForCompanyRequest
 */
export type ContractorPaymentsApiListForCompanyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ContractorPaymentsApiListForCompany
    */
    readonly companyId: string
    
    /**
    * The time period for which to retrieve contractor payments
    * @type {string}
    * @memberof ContractorPaymentsApiListForCompany
    */
    readonly startDate: string
    
    /**
    * The time period for which to retrieve contractor payments
    * @type {string}
    * @memberof ContractorPaymentsApiListForCompany
    */
    readonly endDate: string
    
    /**
    * The UUID of the contractor. When specified, will load all payments for that contractor.
    * @type {string}
    * @memberof ContractorPaymentsApiListForCompany
    */
    readonly contractorUuid?: string
    
    /**
    * Display contractor payments results group by check date if set to true.
    * @type {boolean}
    * @memberof ContractorPaymentsApiListForCompany
    */
    readonly groupByDate?: boolean
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof ContractorPaymentsApiListForCompany
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof ContractorPaymentsApiListForCompany
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentsApiListForCompany
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * ContractorPaymentsApiGenerated - object-oriented interface
 * @export
 * @class ContractorPaymentsApiGenerated
 * @extends {BaseAPI}
 */
export class ContractorPaymentsApiGenerated extends BaseAPI {
    /**
     * Returns a single contractor payments  scope: `payrolls:read`
     * @summary Get a single contractor payment
     * @param {ContractorPaymentsApiGetSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentsApiGenerated
     */
    public getSingle(requestParameters: ContractorPaymentsApiGetSingleRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentsApiFp(this.configuration).getSingle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an object containing individual contractor payments, within a given time period, including totals.  scope: `payrolls:read`
     * @summary Get contractor payments for a company
     * @param {ContractorPaymentsApiListForCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentsApiGenerated
     */
    public listForCompany(requestParameters: ContractorPaymentsApiListForCompanyRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentsApiFp(this.configuration).listForCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
