/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BenefitSummary } from '../models';
// @ts-ignore
import { BenefitTypeRequirements } from '../models';
// @ts-ignore
import { CompanyBenefit } from '../models';
// @ts-ignore
import { CompanyBenefitWithEmployeeBenefits } from '../models';
// @ts-ignore
import { CompanyBenefitsCreateCompanyBenefitRequest } from '../models';
// @ts-ignore
import { CompanyBenefitsRemoveBenefitResponse } from '../models';
// @ts-ignore
import { CompanyBenefitsUpdateBenefitRequest } from '../models';
// @ts-ignore
import { SupportedBenefit } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompanyBenefitsApi - axios parameter creator
 * @export
 */
export const CompanyBenefitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: `company_benefits:write`
         * @summary Create a company benefit
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {CompanyBenefitsCreateCompanyBenefitRequest} [companyBenefitsCreateCompanyBenefitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyBenefit: async (companyId: string, xGustoApiVersion?: '2024-03-01', companyBenefitsCreateCompanyBenefitRequest?: CompanyBenefitsCreateCompanyBenefitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createCompanyBenefit', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/company_benefits`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companyBenefitsCreateCompanyBenefitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/company_benefits',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companyBenefitsCreateCompanyBenefitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all benefits supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: `benefits:read`
         * @summary Get all benefits supported by Gusto
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSupportedBenefits: async (xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/benefits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/benefits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.  scope: `company_benefits:read`
         * @summary Get benefits for a company
         * @param {string} companyId The UUID of the company
         * @param {boolean} [enrollmentCount] Whether to return employee enrollment count
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCompanyId: async (companyId: string, enrollmentCount?: boolean, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getByCompanyId', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/company_benefits`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (enrollmentCount !== undefined) {
                localVarQueryParameter['enrollment_count'] = enrollmentCount;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/company_benefits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.  scope: `company_benefits:read`
         * @summary Get a company benefit
         * @param {string} companyBenefitId The UUID of the company benefit
         * @param {boolean} [withEmployeeBenefits] Whether to return employee benefits associated with the benefit
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (companyBenefitId: string, withEmployeeBenefits?: boolean, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyBenefitId' is not null or undefined
            assertParamExists('getById', 'companyBenefitId', companyBenefitId)
            const localVarPath = `/v1/company_benefits/{company_benefit_id}`
                .replace(`{${"company_benefit_id"}}`, encodeURIComponent(String(companyBenefitId !== undefined ? companyBenefitId : `-company_benefit_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (withEmployeeBenefits !== undefined) {
                localVarQueryParameter['with_employee_benefits'] = withEmployeeBenefits;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company_benefits/{company_benefit_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns field requirements for the requested benefit type.  scope: `benefits:read`
         * @summary Get benefit fields requirements by ID
         * @param {string} benefitId The benefit type in Gusto.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFieldsRequirementsById: async (benefitId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'benefitId' is not null or undefined
            assertParamExists('getFieldsRequirementsById', 'benefitId', benefitId)
            const localVarPath = `/v1/benefits/{benefit_id}/requirements`
                .replace(`{${"benefit_id"}}`, encodeURIComponent(String(benefitId !== undefined ? benefitId : `-benefit_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/benefits/{benefit_id}/requirements',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns summary benefit data for the requested company benefit id.  Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.  scope: `company_benefits:read`
         * @summary Get company benefit summary by company benefit id.
         * @param {string} companyBenefitId The UUID of the company benefit
         * @param {string} [startDate] The start date for which to retrieve company benefit summary
         * @param {string} [endDate] The end date for which to retrieve company benefit summary
         * @param {boolean} [detailed] Display employee payroll item summary
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryById: async (companyBenefitId: string, startDate?: string, endDate?: string, detailed?: boolean, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyBenefitId' is not null or undefined
            assertParamExists('getSummaryById', 'companyBenefitId', companyBenefitId)
            const localVarPath = `/v1/company_benefits/{company_benefit_id}/summary`
                .replace(`{${"company_benefit_id"}}`, encodeURIComponent(String(companyBenefitId !== undefined ? companyBenefitId : `-company_benefit_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (detailed !== undefined) {
                localVarQueryParameter['detailed'] = detailed;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company_benefits/{company_benefit_id}/summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a benefit supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: `benefits:read`
         * @summary Get a supported benefit by ID
         * @param {string} benefitId The benefit type in Gusto.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedBenefitById: async (benefitId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'benefitId' is not null or undefined
            assertParamExists('getSupportedBenefitById', 'benefitId', benefitId)
            const localVarPath = `/v1/benefits/{benefit_id}`
                .replace(`{${"benefit_id"}}`, encodeURIComponent(String(benefitId !== undefined ? benefitId : `-benefit_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/benefits/{benefit_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The following must be true in order to delete a company benefit   - There are no employee benefits associated with the company benefit   - There are no payroll items associated with the company benefit   - The benefit is not managed by a Partner or by Gusto (type must be \'External\')  scope: `company_benefits:write`
         * @summary Delete a company benefit
         * @param {string} companyBenefitId The UUID of the company benefit
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBenefit: async (companyBenefitId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyBenefitId' is not null or undefined
            assertParamExists('removeBenefit', 'companyBenefitId', companyBenefitId)
            const localVarPath = `/v1/company_benefits/{company_benefit_id}`
                .replace(`{${"company_benefit_id"}}`, encodeURIComponent(String(companyBenefitId !== undefined ? companyBenefitId : `-company_benefit_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company_benefits/{company_benefit_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: `company_benefits:write`
         * @summary Update a company benefit
         * @param {string} companyBenefitId The UUID of the company benefit
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {CompanyBenefitsUpdateBenefitRequest} [companyBenefitsUpdateBenefitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBenefit: async (companyBenefitId: string, xGustoApiVersion?: '2024-03-01', companyBenefitsUpdateBenefitRequest?: CompanyBenefitsUpdateBenefitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyBenefitId' is not null or undefined
            assertParamExists('updateBenefit', 'companyBenefitId', companyBenefitId)
            const localVarPath = `/v1/company_benefits/{company_benefit_id}`
                .replace(`{${"company_benefit_id"}}`, encodeURIComponent(String(companyBenefitId !== undefined ? companyBenefitId : `-company_benefit_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companyBenefitsUpdateBenefitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company_benefits/{company_benefit_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companyBenefitsUpdateBenefitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyBenefitsApi - functional programming interface
 * @export
 */
export const CompanyBenefitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyBenefitsApiAxiosParamCreator(configuration)
    return {
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: `company_benefits:write`
         * @summary Create a company benefit
         * @param {CompanyBenefitsApiCreateCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompanyBenefit(requestParameters: CompanyBenefitsApiCreateCompanyBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyBenefit>> {
            const companyBenefitsCreateCompanyBenefitRequest: CompanyBenefitsCreateCompanyBenefitRequest = {
                description: requestParameters.description,
                benefit_type: requestParameters.benefit_type,
                active: requestParameters.active,
                responsible_for_employer_taxes: requestParameters.responsible_for_employer_taxes,
                responsible_for_employee_w2: requestParameters.responsible_for_employee_w2
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCompanyBenefit(requestParameters.companyId, requestParameters.xGustoApiVersion, companyBenefitsCreateCompanyBenefitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all benefits supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: `benefits:read`
         * @summary Get all benefits supported by Gusto
         * @param {CompanyBenefitsApiGetAllSupportedBenefitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSupportedBenefits(requestParameters: CompanyBenefitsApiGetAllSupportedBenefitsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SupportedBenefit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSupportedBenefits(requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.  scope: `company_benefits:read`
         * @summary Get benefits for a company
         * @param {CompanyBenefitsApiGetByCompanyIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCompanyId(requestParameters: CompanyBenefitsApiGetByCompanyIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyBenefit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByCompanyId(requestParameters.companyId, requestParameters.enrollmentCount, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.  scope: `company_benefits:read`
         * @summary Get a company benefit
         * @param {CompanyBenefitsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CompanyBenefitsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyBenefitWithEmployeeBenefits>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.companyBenefitId, requestParameters.withEmployeeBenefits, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns field requirements for the requested benefit type.  scope: `benefits:read`
         * @summary Get benefit fields requirements by ID
         * @param {CompanyBenefitsApiGetFieldsRequirementsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFieldsRequirementsById(requestParameters: CompanyBenefitsApiGetFieldsRequirementsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BenefitTypeRequirements>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFieldsRequirementsById(requestParameters.benefitId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns summary benefit data for the requested company benefit id.  Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.  scope: `company_benefits:read`
         * @summary Get company benefit summary by company benefit id.
         * @param {CompanyBenefitsApiGetSummaryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummaryById(requestParameters: CompanyBenefitsApiGetSummaryByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BenefitSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummaryById(requestParameters.companyBenefitId, requestParameters.startDate, requestParameters.endDate, requestParameters.detailed, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a benefit supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: `benefits:read`
         * @summary Get a supported benefit by ID
         * @param {CompanyBenefitsApiGetSupportedBenefitByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportedBenefitById(requestParameters: CompanyBenefitsApiGetSupportedBenefitByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportedBenefit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupportedBenefitById(requestParameters.benefitId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The following must be true in order to delete a company benefit   - There are no employee benefits associated with the company benefit   - There are no payroll items associated with the company benefit   - The benefit is not managed by a Partner or by Gusto (type must be \'External\')  scope: `company_benefits:write`
         * @summary Delete a company benefit
         * @param {CompanyBenefitsApiRemoveBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBenefit(requestParameters: CompanyBenefitsApiRemoveBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBenefit(requestParameters.companyBenefitId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: `company_benefits:write`
         * @summary Update a company benefit
         * @param {CompanyBenefitsApiUpdateBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBenefit(requestParameters: CompanyBenefitsApiUpdateBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyBenefit>> {
            const companyBenefitsUpdateBenefitRequest: CompanyBenefitsUpdateBenefitRequest = {
                description: requestParameters.description,
                version: requestParameters.version,
                active: requestParameters.active
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBenefit(requestParameters.companyBenefitId, requestParameters.xGustoApiVersion, companyBenefitsUpdateBenefitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyBenefitsApi - factory interface
 * @export
 */
export const CompanyBenefitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyBenefitsApiFp(configuration)
    return {
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: `company_benefits:write`
         * @summary Create a company benefit
         * @param {CompanyBenefitsApiCreateCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyBenefit(requestParameters: CompanyBenefitsApiCreateCompanyBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyBenefit> {
            return localVarFp.createCompanyBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all benefits supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: `benefits:read`
         * @summary Get all benefits supported by Gusto
         * @param {CompanyBenefitsApiGetAllSupportedBenefitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSupportedBenefits(requestParameters: CompanyBenefitsApiGetAllSupportedBenefitsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<SupportedBenefit>> {
            return localVarFp.getAllSupportedBenefits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.  scope: `company_benefits:read`
         * @summary Get benefits for a company
         * @param {CompanyBenefitsApiGetByCompanyIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCompanyId(requestParameters: CompanyBenefitsApiGetByCompanyIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CompanyBenefit>> {
            return localVarFp.getByCompanyId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.  scope: `company_benefits:read`
         * @summary Get a company benefit
         * @param {CompanyBenefitsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CompanyBenefitsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyBenefitWithEmployeeBenefits> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns field requirements for the requested benefit type.  scope: `benefits:read`
         * @summary Get benefit fields requirements by ID
         * @param {CompanyBenefitsApiGetFieldsRequirementsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFieldsRequirementsById(requestParameters: CompanyBenefitsApiGetFieldsRequirementsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BenefitTypeRequirements> {
            return localVarFp.getFieldsRequirementsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns summary benefit data for the requested company benefit id.  Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.  scope: `company_benefits:read`
         * @summary Get company benefit summary by company benefit id.
         * @param {CompanyBenefitsApiGetSummaryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummaryById(requestParameters: CompanyBenefitsApiGetSummaryByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BenefitSummary> {
            return localVarFp.getSummaryById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a benefit supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: `benefits:read`
         * @summary Get a supported benefit by ID
         * @param {CompanyBenefitsApiGetSupportedBenefitByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedBenefitById(requestParameters: CompanyBenefitsApiGetSupportedBenefitByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SupportedBenefit> {
            return localVarFp.getSupportedBenefitById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The following must be true in order to delete a company benefit   - There are no employee benefits associated with the company benefit   - There are no payroll items associated with the company benefit   - The benefit is not managed by a Partner or by Gusto (type must be \'External\')  scope: `company_benefits:write`
         * @summary Delete a company benefit
         * @param {CompanyBenefitsApiRemoveBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBenefit(requestParameters: CompanyBenefitsApiRemoveBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: `company_benefits:write`
         * @summary Update a company benefit
         * @param {CompanyBenefitsApiUpdateBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBenefit(requestParameters: CompanyBenefitsApiUpdateBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyBenefit> {
            return localVarFp.updateBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCompanyBenefit operation in CompanyBenefitsApi.
 * @export
 * @interface CompanyBenefitsApiCreateCompanyBenefitRequest
 */
export type CompanyBenefitsApiCreateCompanyBenefitRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompanyBenefitsApiCreateCompanyBenefit
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyBenefitsApiCreateCompanyBenefit
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & CompanyBenefitsCreateCompanyBenefitRequest

/**
 * Request parameters for getAllSupportedBenefits operation in CompanyBenefitsApi.
 * @export
 * @interface CompanyBenefitsApiGetAllSupportedBenefitsRequest
 */
export type CompanyBenefitsApiGetAllSupportedBenefitsRequest = {
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyBenefitsApiGetAllSupportedBenefits
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getByCompanyId operation in CompanyBenefitsApi.
 * @export
 * @interface CompanyBenefitsApiGetByCompanyIdRequest
 */
export type CompanyBenefitsApiGetByCompanyIdRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompanyBenefitsApiGetByCompanyId
    */
    readonly companyId: string
    
    /**
    * Whether to return employee enrollment count
    * @type {boolean}
    * @memberof CompanyBenefitsApiGetByCompanyId
    */
    readonly enrollmentCount?: boolean
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyBenefitsApiGetByCompanyId
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getById operation in CompanyBenefitsApi.
 * @export
 * @interface CompanyBenefitsApiGetByIdRequest
 */
export type CompanyBenefitsApiGetByIdRequest = {
    
    /**
    * The UUID of the company benefit
    * @type {string}
    * @memberof CompanyBenefitsApiGetById
    */
    readonly companyBenefitId: string
    
    /**
    * Whether to return employee benefits associated with the benefit
    * @type {boolean}
    * @memberof CompanyBenefitsApiGetById
    */
    readonly withEmployeeBenefits?: boolean
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyBenefitsApiGetById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getFieldsRequirementsById operation in CompanyBenefitsApi.
 * @export
 * @interface CompanyBenefitsApiGetFieldsRequirementsByIdRequest
 */
export type CompanyBenefitsApiGetFieldsRequirementsByIdRequest = {
    
    /**
    * The benefit type in Gusto.
    * @type {string}
    * @memberof CompanyBenefitsApiGetFieldsRequirementsById
    */
    readonly benefitId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyBenefitsApiGetFieldsRequirementsById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getSummaryById operation in CompanyBenefitsApi.
 * @export
 * @interface CompanyBenefitsApiGetSummaryByIdRequest
 */
export type CompanyBenefitsApiGetSummaryByIdRequest = {
    
    /**
    * The UUID of the company benefit
    * @type {string}
    * @memberof CompanyBenefitsApiGetSummaryById
    */
    readonly companyBenefitId: string
    
    /**
    * The start date for which to retrieve company benefit summary
    * @type {string}
    * @memberof CompanyBenefitsApiGetSummaryById
    */
    readonly startDate?: string
    
    /**
    * The end date for which to retrieve company benefit summary
    * @type {string}
    * @memberof CompanyBenefitsApiGetSummaryById
    */
    readonly endDate?: string
    
    /**
    * Display employee payroll item summary
    * @type {boolean}
    * @memberof CompanyBenefitsApiGetSummaryById
    */
    readonly detailed?: boolean
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyBenefitsApiGetSummaryById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getSupportedBenefitById operation in CompanyBenefitsApi.
 * @export
 * @interface CompanyBenefitsApiGetSupportedBenefitByIdRequest
 */
export type CompanyBenefitsApiGetSupportedBenefitByIdRequest = {
    
    /**
    * The benefit type in Gusto.
    * @type {string}
    * @memberof CompanyBenefitsApiGetSupportedBenefitById
    */
    readonly benefitId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyBenefitsApiGetSupportedBenefitById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for removeBenefit operation in CompanyBenefitsApi.
 * @export
 * @interface CompanyBenefitsApiRemoveBenefitRequest
 */
export type CompanyBenefitsApiRemoveBenefitRequest = {
    
    /**
    * The UUID of the company benefit
    * @type {string}
    * @memberof CompanyBenefitsApiRemoveBenefit
    */
    readonly companyBenefitId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyBenefitsApiRemoveBenefit
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateBenefit operation in CompanyBenefitsApi.
 * @export
 * @interface CompanyBenefitsApiUpdateBenefitRequest
 */
export type CompanyBenefitsApiUpdateBenefitRequest = {
    
    /**
    * The UUID of the company benefit
    * @type {string}
    * @memberof CompanyBenefitsApiUpdateBenefit
    */
    readonly companyBenefitId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyBenefitsApiUpdateBenefit
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & CompanyBenefitsUpdateBenefitRequest

/**
 * CompanyBenefitsApiGenerated - object-oriented interface
 * @export
 * @class CompanyBenefitsApiGenerated
 * @extends {BaseAPI}
 */
export class CompanyBenefitsApiGenerated extends BaseAPI {
    /**
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: `company_benefits:write`
     * @summary Create a company benefit
     * @param {CompanyBenefitsApiCreateCompanyBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyBenefitsApiGenerated
     */
    public createCompanyBenefit(requestParameters: CompanyBenefitsApiCreateCompanyBenefitRequest, options?: AxiosRequestConfig) {
        return CompanyBenefitsApiFp(this.configuration).createCompanyBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all benefits supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: `benefits:read`
     * @summary Get all benefits supported by Gusto
     * @param {CompanyBenefitsApiGetAllSupportedBenefitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyBenefitsApiGenerated
     */
    public getAllSupportedBenefits(requestParameters: CompanyBenefitsApiGetAllSupportedBenefitsRequest = {}, options?: AxiosRequestConfig) {
        return CompanyBenefitsApiFp(this.configuration).getAllSupportedBenefits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.  scope: `company_benefits:read`
     * @summary Get benefits for a company
     * @param {CompanyBenefitsApiGetByCompanyIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyBenefitsApiGenerated
     */
    public getByCompanyId(requestParameters: CompanyBenefitsApiGetByCompanyIdRequest, options?: AxiosRequestConfig) {
        return CompanyBenefitsApiFp(this.configuration).getByCompanyId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.  scope: `company_benefits:read`
     * @summary Get a company benefit
     * @param {CompanyBenefitsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyBenefitsApiGenerated
     */
    public getById(requestParameters: CompanyBenefitsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CompanyBenefitsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns field requirements for the requested benefit type.  scope: `benefits:read`
     * @summary Get benefit fields requirements by ID
     * @param {CompanyBenefitsApiGetFieldsRequirementsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyBenefitsApiGenerated
     */
    public getFieldsRequirementsById(requestParameters: CompanyBenefitsApiGetFieldsRequirementsByIdRequest, options?: AxiosRequestConfig) {
        return CompanyBenefitsApiFp(this.configuration).getFieldsRequirementsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns summary benefit data for the requested company benefit id.  Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.  scope: `company_benefits:read`
     * @summary Get company benefit summary by company benefit id.
     * @param {CompanyBenefitsApiGetSummaryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyBenefitsApiGenerated
     */
    public getSummaryById(requestParameters: CompanyBenefitsApiGetSummaryByIdRequest, options?: AxiosRequestConfig) {
        return CompanyBenefitsApiFp(this.configuration).getSummaryById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a benefit supported by Gusto.  The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.  scope: `benefits:read`
     * @summary Get a supported benefit by ID
     * @param {CompanyBenefitsApiGetSupportedBenefitByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyBenefitsApiGenerated
     */
    public getSupportedBenefitById(requestParameters: CompanyBenefitsApiGetSupportedBenefitByIdRequest, options?: AxiosRequestConfig) {
        return CompanyBenefitsApiFp(this.configuration).getSupportedBenefitById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The following must be true in order to delete a company benefit   - There are no employee benefits associated with the company benefit   - There are no payroll items associated with the company benefit   - The benefit is not managed by a Partner or by Gusto (type must be \'External\')  scope: `company_benefits:write`
     * @summary Delete a company benefit
     * @param {CompanyBenefitsApiRemoveBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyBenefitsApiGenerated
     */
    public removeBenefit(requestParameters: CompanyBenefitsApiRemoveBenefitRequest, options?: AxiosRequestConfig) {
        return CompanyBenefitsApiFp(this.configuration).removeBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.  Note that company benefits can be deactivated only when no employees are enrolled.  scope: `company_benefits:write`
     * @summary Update a company benefit
     * @param {CompanyBenefitsApiUpdateBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyBenefitsApiGenerated
     */
    public updateBenefit(requestParameters: CompanyBenefitsApiUpdateBenefitRequest, options?: AxiosRequestConfig) {
        return CompanyBenefitsApiFp(this.configuration).updateBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
