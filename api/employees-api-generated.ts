/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Employee } from '../models';
// @ts-ignore
import { EmployeesCreateEmployeeRequest } from '../models';
// @ts-ignore
import { EmployeesGetCustomFieldsResponse } from '../models';
// @ts-ignore
import { EmployeesUpdateEmployeeRequest } from '../models';
// @ts-ignore
import { TimeOffActivity } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export const EmployeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an employee.  scope: `employees:manage`
         * @summary Create an employee
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeesCreateEmployeeRequest} [employeesCreateEmployeeRequest] Create an employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee: async (companyId: string, xGustoApiVersion?: '2024-03-01', employeesCreateEmployeeRequest?: EmployeesCreateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createEmployee', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/employees`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeesCreateEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/employees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeesCreateEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: `employees:manage`
         * @summary Delete an onboarding employee
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnboardingEmployee: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteOnboardingEmployee', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all of the employees, onboarding, active and terminated, for a given company.  scope: `employees:read`
         * @summary Get employees of a company
         * @param {string} companyId The UUID of the company
         * @param {boolean} [terminated] Filters employees by the provided boolean
         * @param {'all_compensations' | 'custom_fields'} [include] Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees\&#39; custom fields
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyEmployees: async (companyId: string, terminated?: boolean, include?: 'all_compensations' | 'custom_fields', page?: number, per?: number, xGustoApiVersion?: '2024-03-01', body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyEmployees', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/employees`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (terminated !== undefined) {
                localVarQueryParameter['terminated'] = terminated;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/employees',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the employee\'s custom fields.  scope: `employees:read`
         * @summary Get an employee\'s custom fields
         * @param {string} employeeId The UUID of the employee
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields: async (employeeId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getCustomFields', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/custom_fields`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee.  scope: `employees:read` 
         * @summary Get an employee
         * @param {string} employeeId The UUID of the employee
         * @param {'all_compensations' | 'custom_fields'} [include] Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees\&#39; custom fields
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (employeeId: string, include?: 'all_compensations' | 'custom_fields', xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getDetails', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get employee time off activities.  scope: `employee_time_off_activities:read`
         * @summary Get employee time off activities
         * @param {string} employeeUuid The UUID of the employee
         * @param {string} timeOffType The time off type name you want to query data for. ex: \&#39;sick\&#39; or \&#39;vacation\&#39;
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffActivities: async (employeeUuid: string, timeOffType: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeUuid' is not null or undefined
            assertParamExists('getTimeOffActivities', 'employeeUuid', employeeUuid)
            // verify required parameter 'timeOffType' is not null or undefined
            assertParamExists('getTimeOffActivities', 'timeOffType', timeOffType)
            const localVarPath = `/v1/employees/{employee_uuid}/time_off_activities`
                .replace(`{${"employee_uuid"}}`, encodeURIComponent(String(employeeUuid !== undefined ? employeeUuid : `-employee_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (timeOffType !== undefined) {
                localVarQueryParameter['time_off_type'] = timeOffType;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_uuid}/time_off_activities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an employee.  scope: `employees:write`
         * @summary Update an employee
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeesUpdateEmployeeRequest} [employeesUpdateEmployeeRequest] Update an employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeesUpdateEmployeeRequest?: EmployeesUpdateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployee', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeesUpdateEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeesUpdateEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeesApi - functional programming interface
 * @export
 */
export const EmployeesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an employee.  scope: `employees:manage`
         * @summary Create an employee
         * @param {EmployeesApiCreateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployee(requestParameters: EmployeesApiCreateEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const employeesCreateEmployeeRequest: EmployeesCreateEmployeeRequest = {
                first_name: requestParameters.first_name,
                middle_initial: requestParameters.middle_initial,
                last_name: requestParameters.last_name,
                date_of_birth: requestParameters.date_of_birth,
                email: requestParameters.email,
                ssn: requestParameters.ssn,
                self_onboarding: requestParameters.self_onboarding
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployee(requestParameters.companyId, requestParameters.xGustoApiVersion, employeesCreateEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: `employees:manage`
         * @summary Delete an onboarding employee
         * @param {EmployeesApiDeleteOnboardingEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOnboardingEmployee(requestParameters: EmployeesApiDeleteOnboardingEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOnboardingEmployee(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all of the employees, onboarding, active and terminated, for a given company.  scope: `employees:read`
         * @summary Get employees of a company
         * @param {EmployeesApiGetCompanyEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyEmployees(requestParameters: EmployeesApiGetCompanyEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Employee>>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyEmployees(requestParameters.companyId, requestParameters.terminated, requestParameters.include, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the employee\'s custom fields.  scope: `employees:read`
         * @summary Get an employee\'s custom fields
         * @param {EmployeesApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFields(requestParameters: EmployeesApiGetCustomFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeesGetCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFields(requestParameters.employeeId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an employee.  scope: `employees:read` 
         * @summary Get an employee
         * @param {EmployeesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: EmployeesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.employeeId, requestParameters.include, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get employee time off activities.  scope: `employee_time_off_activities:read`
         * @summary Get employee time off activities
         * @param {EmployeesApiGetTimeOffActivitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeOffActivities(requestParameters: EmployeesApiGetTimeOffActivitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeOffActivities(requestParameters.employeeUuid, requestParameters.timeOffType, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an employee.  scope: `employees:write`
         * @summary Update an employee
         * @param {EmployeesApiUpdateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployee(requestParameters: EmployeesApiUpdateEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const employeesUpdateEmployeeRequest: EmployeesUpdateEmployeeRequest = {
                version: requestParameters.version,
                first_name: requestParameters.first_name,
                middle_initial: requestParameters.middle_initial,
                last_name: requestParameters.last_name,
                date_of_birth: requestParameters.date_of_birth,
                email: requestParameters.email,
                ssn: requestParameters.ssn,
                two_percent_shareholder: requestParameters.two_percent_shareholder
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeesUpdateEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeesApi - factory interface
 * @export
 */
export const EmployeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeesApiFp(configuration)
    return {
        /**
         * Create an employee.  scope: `employees:manage`
         * @summary Create an employee
         * @param {EmployeesApiCreateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee(requestParameters: EmployeesApiCreateEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.createEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: `employees:manage`
         * @summary Delete an onboarding employee
         * @param {EmployeesApiDeleteOnboardingEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnboardingEmployee(requestParameters: EmployeesApiDeleteOnboardingEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOnboardingEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all of the employees, onboarding, active and terminated, for a given company.  scope: `employees:read`
         * @summary Get employees of a company
         * @param {EmployeesApiGetCompanyEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyEmployees(requestParameters: EmployeesApiGetCompanyEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Employee>> {
            return localVarFp.getCompanyEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the employee\'s custom fields.  scope: `employees:read`
         * @summary Get an employee\'s custom fields
         * @param {EmployeesApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields(requestParameters: EmployeesApiGetCustomFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeesGetCustomFieldsResponse> {
            return localVarFp.getCustomFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an employee.  scope: `employees:read` 
         * @summary Get an employee
         * @param {EmployeesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: EmployeesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get employee time off activities.  scope: `employee_time_off_activities:read`
         * @summary Get employee time off activities
         * @param {EmployeesApiGetTimeOffActivitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffActivities(requestParameters: EmployeesApiGetTimeOffActivitiesRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffActivity> {
            return localVarFp.getTimeOffActivities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an employee.  scope: `employees:write`
         * @summary Update an employee
         * @param {EmployeesApiUpdateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee(requestParameters: EmployeesApiUpdateEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.updateEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiCreateEmployeeRequest
 */
export type EmployeesApiCreateEmployeeRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof EmployeesApiCreateEmployee
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiCreateEmployee
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeesCreateEmployeeRequest

/**
 * Request parameters for deleteOnboardingEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiDeleteOnboardingEmployeeRequest
 */
export type EmployeesApiDeleteOnboardingEmployeeRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiDeleteOnboardingEmployee
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiDeleteOnboardingEmployee
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCompanyEmployees operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetCompanyEmployeesRequest
 */
export type EmployeesApiGetCompanyEmployeesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof EmployeesApiGetCompanyEmployees
    */
    readonly companyId: string
    
    /**
    * Filters employees by the provided boolean
    * @type {boolean}
    * @memberof EmployeesApiGetCompanyEmployees
    */
    readonly terminated?: boolean
    
    /**
    * Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees\' custom fields
    * @type {'all_compensations' | 'custom_fields'}
    * @memberof EmployeesApiGetCompanyEmployees
    */
    readonly include?: 'all_compensations' | 'custom_fields'
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof EmployeesApiGetCompanyEmployees
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof EmployeesApiGetCompanyEmployees
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiGetCompanyEmployees
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & object

/**
 * Request parameters for getCustomFields operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetCustomFieldsRequest
 */
export type EmployeesApiGetCustomFieldsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiGetCustomFields
    */
    readonly employeeId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof EmployeesApiGetCustomFields
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof EmployeesApiGetCustomFields
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiGetCustomFields
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getDetails operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetDetailsRequest
 */
export type EmployeesApiGetDetailsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiGetDetails
    */
    readonly employeeId: string
    
    /**
    * Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees\' custom fields
    * @type {'all_compensations' | 'custom_fields'}
    * @memberof EmployeesApiGetDetails
    */
    readonly include?: 'all_compensations' | 'custom_fields'
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiGetDetails
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getTimeOffActivities operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetTimeOffActivitiesRequest
 */
export type EmployeesApiGetTimeOffActivitiesRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiGetTimeOffActivities
    */
    readonly employeeUuid: string
    
    /**
    * The time off type name you want to query data for. ex: \'sick\' or \'vacation\'
    * @type {string}
    * @memberof EmployeesApiGetTimeOffActivities
    */
    readonly timeOffType: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiGetTimeOffActivities
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdateEmployeeRequest
 */
export type EmployeesApiUpdateEmployeeRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiUpdateEmployee
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiUpdateEmployee
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeesUpdateEmployeeRequest

/**
 * EmployeesApiGenerated - object-oriented interface
 * @export
 * @class EmployeesApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeesApiGenerated extends BaseAPI {
    /**
     * Create an employee.  scope: `employees:manage`
     * @summary Create an employee
     * @param {EmployeesApiCreateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public createEmployee(requestParameters: EmployeesApiCreateEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).createEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: `employees:manage`
     * @summary Delete an onboarding employee
     * @param {EmployeesApiDeleteOnboardingEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public deleteOnboardingEmployee(requestParameters: EmployeesApiDeleteOnboardingEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).deleteOnboardingEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all of the employees, onboarding, active and terminated, for a given company.  scope: `employees:read`
     * @summary Get employees of a company
     * @param {EmployeesApiGetCompanyEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getCompanyEmployees(requestParameters: EmployeesApiGetCompanyEmployeesRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getCompanyEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the employee\'s custom fields.  scope: `employees:read`
     * @summary Get an employee\'s custom fields
     * @param {EmployeesApiGetCustomFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getCustomFields(requestParameters: EmployeesApiGetCustomFieldsRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getCustomFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an employee.  scope: `employees:read` 
     * @summary Get an employee
     * @param {EmployeesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getDetails(requestParameters: EmployeesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get employee time off activities.  scope: `employee_time_off_activities:read`
     * @summary Get employee time off activities
     * @param {EmployeesApiGetTimeOffActivitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getTimeOffActivities(requestParameters: EmployeesApiGetTimeOffActivitiesRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getTimeOffActivities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an employee.  scope: `employees:write`
     * @summary Update an employee
     * @param {EmployeesApiUpdateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updateEmployee(requestParameters: EmployeesApiUpdateEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updateEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
